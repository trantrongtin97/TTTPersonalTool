@page "/settings"


@inject ISettingsViewModel _settingsViewModel
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@inject IToastService _toastService
@inject IStringLocalizer<Resource> localizer

@attribute [Authorize]

<SpinLoader IsLoading="IsLoading">
    <LoadingTemplate>
        <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
            <br /><br />
            <Chase Center="true" Color="blue" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <div class="card">
            <div class="card-header">
                <strong>@localizer["Settings"]</strong>
            </div>
            <div class="card-body">
                <form>
                    <div class="form-group-row align-items-center">
                        <div class="col-auto" hidden="@(!IsUserAuthorized)">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @bind="@_settingsViewModel.Theme">
                                <label class="ttt-label-form" style="margin-top:5px; margin-left:2px;">@localizer["DarkTheme"]</label>
                            </div>
                        </div>
                        <div class="col-auto">
                            <CultureSelector />
                        </div>
                    </div>
                    <hr />
                    <div class="form-group-row">
                        <input type="button" class="btn btn-danger mb-2" value="Save" @onclick="Save_Click" />
                    </div>
                </form>
            </div>
        </div>
        <TTT.Framework.Component.SubComponents.ConfirmSave @ref="SaveConfirmation" ConfirmationChanged="ConfirmSave_Click"
                                                        ConfirmationMessage="@localizer["MsgConfirmSave"]" ConfirmationTitle=@localizer["TitleConfirmSave"] />
    </ContentTemplate>
</SpinLoader>
<br />

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    [CascadingParameter]
    public Error Error { get; set; } = default!;

    private bool IsUserAuthorized { get; set; }
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() 
    {
        try
        {
            var authState = await AuthenticationState;
            var user = authState.User;

            if(user.Identity is { IsAuthenticated: true })
            {
                var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
                _settingsViewModel.Id = Convert.ToInt32(claim?.Value);
                IsUserAuthorized = user.IsInRole(TTTPermissions.Admin) || user.IsInRole(TTTPermissions.TTTAdmin);

                await _settingsViewModel.GetProfile();
                IsLoading = false;
            }
            else
            {
                _navigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            await Error.ProcessError(ex);
        }
    } 

    private async Task UpdateTheme()
    {
        var themeName = _settingsViewModel.Theme ? "dark" : "light";

        var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "/js/site.js");
        await module.InvokeVoidAsync("setTheme", themeName);

        await _settingsViewModel.UpdateTheme();
    }


    private async Task SaveSettings()
    {
        await UpdateTheme(); 
        _toastService.ShowSuccess(localizer["SettingSaveSuccess"]);
    }


    protected TTT.Framework.Component.SubComponents.ConfirmSave SaveConfirmation { get; set; }

    protected void Save_Click()
    {
        SaveConfirmation.Show();
    }

    protected async Task ConfirmSave_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await SaveSettings();
        }
    }
}