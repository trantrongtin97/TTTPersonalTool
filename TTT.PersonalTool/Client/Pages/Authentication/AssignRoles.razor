@page "/assignroles"


@inject IAssignRolesViewModel _assignRolesViewModel
@inject IToastService _toastService
@inject NavigationManager _navigationManager
@inject IStringLocalizer<Resource> localizer
@attribute [Authorize(Policy = nameof(TTTPermissions.Policy_LvAdmin))]


<SpinLoader IsLoading="IsLoading">
    <LoadingTemplate>
        <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
            <br /><br />
            <Chase Center="true" Color="blue" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <div class="card">
            <div class="card-header">
                <strong>@localizer["AssignRoles"]</strong>
            </div>
            <div class="card-body">
                @if (_assignRolesViewModel.AllUsers?.Any() ?? false)
                {
                    foreach (var user in _assignRolesViewModel.AllUsers)
                    {
                        <div class="list-group-item list-group-item-action flex-column align-items-start contact-list-item" style="height: 55px;">
                            <div class="row col-12">
                                <div class="col-6" style="font-size: large;">
                                    @user.Username
                                </div>
                                <div class="col-3">
                                    <select class="form-control"
                                            name="roles"
                                            id="roles"
                                    @onchange="@AssignRole">
                                        <option value=@($"#{user.Id}")>None</option>
                                        @{
                                            foreach (var role in _assignRolesViewModel.AllRoles)
                                            {
                                                <option value=@($"{role}#{user.Id}") selected="@(user.Role==role)">@role</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="col-3">
                                    <button class="btn btn-danger" @onclick="() =>Delete_Click(user.Id)">@localizer["Delete"]</button>
                                </div>
                            </div>
                        </div>
                    }
                }
                
            </div>
        </div>
        <TTT.Framework.Component.SubComponents.ConfirmDelete @ref="DeleteConfirmation" ConfirmationChanged="ConfirmDelete_Click"
                                                                                             ConfirmationMessage="@localizer["MsgConfirmDelete"]" ConfirmationTitle=@localizer["TitleConfirmDelete"]/>
    </ContentTemplate>
</SpinLoader>

@code {
    private bool IsLoading { get; set; } = true;
    [CascadingParameter]
    public Error Error { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await _assignRolesViewModel.LoadAllUsers();
        await _assignRolesViewModel.LoadAllRole();
        IsLoading = false;
    }

    private async Task DeleteUser(int userId)
    {
        await _assignRolesViewModel.DeleteUser(userId);
        await _assignRolesViewModel.LoadAllUsers();
        StateHasChanged();
    }

    private async Task AssignRole(ChangeEventArgs eventArgs)
    {
        var selectedValues = (eventArgs.Value?.ToString() ?? "").Split('#');
        int.TryParse(selectedValues[1], out int rs);
        try
        {
            await _assignRolesViewModel.AssignRole(rs, selectedValues[0]);
            _toastService.ShowSuccess(localizer["RoleUpdateSuccess"]);
        }
        catch (Exception ex)
        {
            await Error.ProcessError(ex);
        }

    }

    protected TTT.Framework.Component.SubComponents.ConfirmDelete DeleteConfirmation { get; set; }
    private int tempid { get; set; }
    protected void Delete_Click(int id)
    {
        tempid = id;
        DeleteConfirmation.Show();
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await DeleteUser(tempid);
        }
        else
        {
            tempid = 0;
        }
    }
}