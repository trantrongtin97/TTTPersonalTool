@page "/profile"
@using System.Security.Claims

@inject IStringLocalizer<Resource> localizer
@inject IProfileViewModel _profileViewModel
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@inject HttpClient _httpClient
@inject IToastService _toastService

<SpinLoader IsLoading="IsLoading">
    <LoadingTemplate>
        <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
            <br /><br />
            <Chase Center="true" Color="blue" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <div class="card">
            <div class="card-header">
                <strong>@localizer["Profile"]</strong>
            </div>
            <div class="card-body">
                <EditForm Model="@_profileViewModel" OnValidSubmit="@UpdateProfile">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-lg-4 col-md-6 col-sm-8">
                            @* <img src="@_profileViewModel.ProfilePicDataUrl" alt="User Profile Picture" class="img-thumbnail"> <br/> <br/> *@
                            @* <InputFile OnChange="@OnInputFileChanged" style="margin-bottom: 1rem;" class="white-text"></InputFile> *@
                        </div>
                        <div class="col-lg-8 col-md-6 col-sm-12">
                            <div class="form-group">
                                <label for="FirstName">@localizer["FirstName"]</label>
                                <input type="text" @bind-value="_profileViewModel.FirstName" class="form-control dark-theme-textbox" placeholder="@localizer["FirstName"]">
                            </div>
                            <div class="form-group">
                                <label for="LastName">@localizer["LastName"]</label>
                                <input type="text" @bind-value="_profileViewModel.LastName" class="form-control dark-theme-textbox" placeholder="@localizer["LastName"]">
                            </div>
                            <div class="form-group">
                                <label for="DateOfBirth">@localizer["DateOfBirth"]</label>
                                <input type="date" @bind-value="_profileViewModel.DateOfBirth" class="form-control dark-theme-textbox" placeholder="@localizer["DateOfBirth"]">
                            </div>
                            <div class="form-group">
                                <label for="Username">@localizer["Username"]</label>
                                <input type="text" @bind-value="_profileViewModel.Username" class="form-control dark-theme-textbox" placeholder="@localizer["Username"]" disabled="true">
                            </div>
                            <button class="btn btn-danger" disabled="@(!IsUserAuthorized)">@localizer["Save"]</button>
                            @*<button class="btn btn-primary" disabled="@(!IsUserAuthorized)" @onclick="DownloadProfilePicture">Download Picture</button> *@
                        </div>
                    </div>
                    </EditForm>
            </div>
        </div>
    </ContentTemplate>
</SpinLoader>

<br />

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    [CascadingParameter]
    public Error Error { get; set; } = default!;

    private bool IsLoading { get; set; } = true;
    private bool IsUserAuthorized { get; set; }

    protected override async Task OnInitializedAsync() 
    {
        var authState = await AuthenticationState;
        var user = authState.User;

        if(user.Identity is { IsAuthenticated: true })
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            _profileViewModel.Id = Convert.ToInt32(claim?.Value);
            IsUserAuthorized = user.IsInRole(TTTPermissions.Admin) || user.IsInRole(TTTPermissions.TTTAdmin);
            try
            {
                await _profileViewModel.GetProfile();
                if (_profileViewModel.ProfilePicDataUrl == null)
                {
                    _profileViewModel.ProfilePicDataUrl = "_content/TTT.PersonalTool.Client/img/profile_pic.jpg";
                    Console.WriteLine(_profileViewModel.ProfilePicDataUrl);
                }
                IsLoading = false;
            }
            catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized) { _navigationManager.NavigateTo("/"); }
            catch (Exception ex)
            {
                await Error.ProcessError(ex);
            }
        }
        else
        {
            _navigationManager.NavigateTo("/");
        }
    }
    // private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    // {
    //     //get the file
    //     var file = inputFileChangeEvent.File;

    //     //read that file in a byte array
    //     var buffer = new byte[file.Size];
    //     await file.OpenReadStream(1512000).ReadAsync(buffer);

    //     //convert byte array to base 64 string
    //     _profileViewModel.ProfilePicDataUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    // }

    // private async Task DownloadProfilePicture()
    // {
    //     var base64String = _profileViewModel.ProfilePicDataUrl.Split(',')[1];

    //     var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import","./js/site.js");
    //     await module.InvokeVoidAsync("downloadFile","image/png",base64String,"profile.png");
    // }

    // private async Task DownloadServerFile()
    // {
    //     //get base64 string from web api call
    //     var httpResponseMessage = await _httpClient.GetAsync("user/DownloadServerFile");
    //     var base64String = await httpResponseMessage.Content.ReadAsStringAsync();

    //     //call javascript function to download the file
    //     await _jsRuntime.InvokeVoidAsync(
    //         "downloadFile",
    //         "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    //         base64String,
    //         "document.docx");
    // }

    private async Task UpdateProfile()
    {
        await _profileViewModel.UpdateProfile();
        _toastService.ShowSuccess(localizer["ProfileUpdateSuccess"]);
    }
}