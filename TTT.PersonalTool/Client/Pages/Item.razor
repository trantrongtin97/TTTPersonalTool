@page "/items"
@using TTT.PersonalTool.Shared.Dtos;
@inject IItemViewModel _itemViewModel
@inject IToastService _toastService
@inject NavigationManager _navigationManager
@inject IStringLocalizer<Resource> localizer
@attribute [Authorize(Policy = nameof(TTTPermissions.Policy_LvFull))]


<SpinLoader IsLoading="IsLoading">
    <LoadingTemplate>
        <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
            <br /><br />
            <Chase Center="true" Color="blue" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <div class="card">
            <div class="card-header">
                <strong>@localizer["Items"]</strong>
            </div>
            <div class="card-body">
                <TTT.Framework.Component.SubComponents.CustomTable Items="_itemViewModel.AllItems" Context="item" ActionDelete="DeleteItemInGrid" ActionEdit="EditItemInGrid">
                    <TableHeader>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Price</th>
                    </TableHeader>
                    <RowTemplate>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.Price</td>
                    </RowTemplate>
                </TTT.Framework.Component.SubComponents.CustomTable>
            </div>
        </div>
    </ContentTemplate>
</SpinLoader>

@code {
    private bool IsLoading { get; set; } = true;

    [CascadingParameter]
    public Error Error { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await _itemViewModel.GetListItem();
        IsLoading = false;
    }

    protected TTT.Framework.Component.SubComponents.CustomTable<ItemDto> CustomTable { get; set; }
    protected async Task DeleteItemInGrid(int idItem)
    {
        await _itemViewModel.DeleteItem(idItem);
        await _itemViewModel.GetListItem();
        StateHasChanged();
    }

    protected async Task EditItemInGrid(object item)
    {
        var a = (ItemDto)item;
    }
}