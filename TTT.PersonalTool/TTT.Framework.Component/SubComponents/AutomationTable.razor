@inherits TableBaseComponent
@typeparam TItem

<table class="table table-bordered table-hover">
    <thead>
        <tr>
            @ColumTemplate
            <th scope="col"><button class="btn btn-danger" id="ttt-btn-grd" @onclick="() =>ForcusCreate_Click()">@MsgBtnCreate</button></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Items)
        {
            if (RowTemplate is not null)
            {
                <tr>
                    @RowTemplate(item)
                    <td style="width:300px">
                        <button class="btn btn-outline-danger" id="ttt-btn-grd" @onclick="() =>ForcusEdit_Click(item)"> @MsgBtnEdit</button>
                        <button class="btn btn-outline-danger" id="ttt-btn-grd" @onclick="() =>ForcusDelete_Click(item)">@MsgBtnDelete</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<TTT.Framework.Component.SubComponents.ConfirmDelete @ref="DeleteConfirmation" ConfirmationChanged="ConfirmDelete_Click"/>

<TTT.Framework.Component.AutoFormComponents.AutomationForm @ref="EditTarget" ObjectChange="ObjectChange" TItem="TItem"/>

<TTT.Framework.Component.AutoFormComponents.AutomationForm @ref="CreateTarget" ObjectChange="ObjectCreate" TItem="TItem" />
                                            
@code{
    [Parameter]
    public RenderFragment? ColumTemplate { get; set; }

    [Parameter]
    public RenderFragment<TItem>? RowTemplate { get; set; }

    [Parameter, AllowNull]
    public IEnumerable<TItem> Items { get; set; }


    private int SelectedID { get; set; }

    protected TTT.Framework.Component.SubComponents.ConfirmDelete  DeleteConfirmation { get; set; }

    protected void ForcusDelete_Click(object obj)
    {
        int.TryParse($"{obj.GetType().GetProperty("Id")?.GetValue(obj)}", out int rs);
        SelectedID = rs;
        DeleteConfirmation.Show();
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await ActionDelete.InvokeAsync(SelectedID);
        }
        else
        {
            SelectedID = 0;
        }
    }

    protected TTT.Framework.Component.AutoFormComponents.AutomationForm<TItem?> EditTarget { get; set; }

    protected async void ForcusEdit_Click(object obj)
    {
        var tempObj = ObjectCloner.ObjectCloner.DeepClone(obj);
        await EditTarget.LoadObj(tempObj);
        EditTarget.Show();
    }

    protected async Task ObjectChange(object obj)
    {
        var a  = (TItem)obj;
    }

    protected TTT.Framework.Component.AutoFormComponents.AutomationForm<TItem?> CreateTarget { get; set; }

    protected async void ForcusCreate_Click()
    {
        await CreateTarget.LoadObj(null);
        CreateTarget.Show();
    }

    protected async Task ObjectCreate(object obj)
    {
        var a = (TItem)obj;
    }
}

