@using Newtonsoft.Json;
@inherits EditBaseComponent
@typeparam TItem
@if (ShowConfirmation)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" id="confirmSaveModal">
        <div class="modal-dialog" role="document">
            @{
                if (Target != null)
                {
                    <EditForm Model="@Target" OnValidSubmit="@ValidSubmit" OnInvalidSubmit="InvalidSubmit">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="confirmSaveModalLabel">
                                    @if (!IsNewForm) @EditTitle else @CreateTitle
                                </h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => OnConfirmationChange(false)">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">

                                <div class="form-group">
                                    <DataAnnotationsValidator />
                                    @CreateComponent()
                                </div>
                                
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => OnConfirmationChange(false)">@MsgBtnCancel</button>
                                <button type="submit" class="btn btn-danger" data-dismiss="modal">@MsgBtnSave</button>
                            </div>
                        </div>
                    </EditForm>
                }
            }
        </div>
    </div>
}

@code {
    private bool IsNewForm { get; set; }
    private TItem? Target { get; set; }
    private Dictionary<string, object?> DicDataLookUp { get; set; }

    public async Task LoadObj(object value, Dictionary<string, object?> dic)
    {
        if (value is not null)
        {
            Target = (TItem)value;
            DicDataLookUp = dic;
            IsNewForm = false;
        }
        else
        {
            Target = Activator.CreateInstance<TItem>();
            DicDataLookUp = dic;
            IsNewForm = true;
        }
    }

    [Parameter]
    public EventCallback<object> ObjectChange { get; set; }

    public async Task ValidSubmit()
    {
        ShowConfirmation = false;
        await ObjectChange.InvokeAsync(Target);
    }

    public async Task InvalidSubmit()
    {
        var a = Target;
    }

    private List<DataLookUp> ParseToLsDataLU(object? obj)
    {
        return JsonConvert.DeserializeObject<List<DataLookUp>>(obj.ToString());
    }

    private List<string> ParseToLsStringLU(object? obj)
    {
        return JsonConvert.DeserializeObject<List<string>>(obj.ToString());
    }

    public RenderFragment CreateComponent() => builder =>
    {
        var proList = typeof(TItem).GetProperties();
        // Dictionary<string, object?> dicDataLU = new Dictionary<string, object?>();
        foreach (var prp in proList)
        {
            // foreach (var p in proList.Where(t => t.Name.EndsWith("LookUp")))
            // {
            //     var dataLookUp = (DataLookUpAttribute)p.GetCustomAttributes(typeof(DataLookUpAttribute), false)?.First();
            //     if (dataLookUp.TargetProperty == prp.Name)
            //     {
            //         var propInfoLU = typeof(TItem).GetProperty(p.Name);
            //         var propInfoLUValue = propInfoLU.GetValue(Target);
            //         if (propInfoLUValue is not null && propInfoLUValue is IEnumerable<DataLookUp>)
            //         {
            //             dicDataLU[dataLookUp.TargetProperty] = ParseToLsDataLU(propInfoLUValue);
            //         }

            //         if (propInfoLUValue is not null && propInfoLUValue is IEnumerable<string>)
            //         {
            //             dicDataLU[dataLookUp.TargetProperty] = ParseToLsStringLU(propInfoLUValue);
            //         }
            //     }
            // }
            if (prp.Name.EndsWith("LookUp")) continue;
            Type T = prp.GetType();
            if (prp.GetCustomAttributes(typeof(TTTDataTypeAttribute), true).Length != 0)
            {
                var attrList = (TTTDataTypeAttribute)prp.GetCustomAttributes(typeof(TTTDataTypeAttribute), false).First();
                var displayLabel = (DisplayAttribute)prp.GetCustomAttributes(typeof(DisplayAttribute), false).First();

                // Get the initial property value.
                var propInfoValue = typeof(TItem).GetProperty(prp.Name);

                // Create an expression to set the ValueExpression-attribute.
                var constant = System.Linq.Expressions.Expression.Constant(Target, typeof(TItem));
                var exp = System.Linq.Expressions.MemberExpression.Property(constant, prp.Name);
                switch (attrList.DataType)
                {
                    case TTTDataType.Text:
                    case TTTDataType.EmailAddress:
                    case TTTDataType.PhoneNumber:
                    case TTTDataType.MultilineText:
                        {
                            OpenComponentInputText(ref builder, prp, exp, propInfoValue);
                            if (attrList.DataType == TTTDataType.MultilineText)
                            {
                                builder.AddAttribute(6, "Multiline", true);
                                builder.AddAttribute(7, "Rowline", 3);
                            }
                            break;
                        }
                    case TTTDataType.Double:
                    case TTTDataType.Currency:
                        OpenComponentInputNumber(ref builder,prp,exp,propInfoValue);
                        break;
                    case TTTDataType.Date:
                        OpenComponentInputDate(ref builder, prp, exp, propInfoValue);
                        break;
                    case TTTDataType.Time:
                        OpenComponentInputTime(ref builder, prp, exp, propInfoValue);
                        break;
                    case TTTDataType.DateTime:
                        OpenComponentInputDateTime(ref builder, prp, exp, propInfoValue);
                        break;
                    case TTTDataType.Combobox:
                        OpenComponentCombobox(ref builder, prp, exp, propInfoValue, DicDataLookUp);
                        break;
                    case TTTDataType.Dropdowlist:
                        OpenComponentDropdowlist(ref builder, prp, exp, propInfoValue, DicDataLookUp);
                        break;
                    case TTTDataType.CheckBox:
                        OpenComponentCheckBox(ref builder, prp, exp, propInfoValue);
                        break;
                    default:
                        break;
                }
                var defaultValue = propInfoValue.GetValue(Target);
                builder.AddAttribute(1, "Value", defaultValue);
                builder.AddAttribute(7, "DisplayName", displayLabel.Name);
                // builder.AddAttribute(6, "FloatLabelType", FloatLabelType.Auto);

                builder.CloseComponent();
            }
        }
    };

    private void OpenComponentInputText(ref Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, 
        System.Reflection.PropertyInfo prp,
        System.Linq.Expressions.MemberExpression exp,
        System.Reflection.PropertyInfo? propInfoValue,
        int index = 0,
        int indexValueChange = 3,
        int indexValueExp = 4)
    {
        switch (prp.PropertyType)
        {
            case Type _ when prp.PropertyType == typeof(string):
                builder.OpenComponent(index, typeof(TTT.Framework.Component.AutoFormComponents.InputText<string>));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<System.String>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<System.String>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (string)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<string>>(exp));
                break;
            case Type _ when prp.PropertyType == typeof(char):
                builder.OpenComponent(index, typeof(TTT.Framework.Component.AutoFormComponents.InputText<char>));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<char>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<char>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (char)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<char>>(exp));
                break;
            default:
                break;
        }
    }

    private void OpenComponentInputNumber(ref Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder,
        System.Reflection.PropertyInfo prp,
        System.Linq.Expressions.MemberExpression exp,
        System.Reflection.PropertyInfo? propInfoValue,
        int index = 0,
        int indexValueChange = 3,
        int indexValueExp = 4)
    {
        switch (prp.PropertyType)
        {
            case Type _ when prp.PropertyType == typeof(int):
                builder.OpenComponent(index, typeof(TTT.Framework.Component.AutoFormComponents.InputNumber<int>));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<int>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<int>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (int)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<int>>(exp));
                break;
            case Type _ when prp.PropertyType == typeof(int?):
                builder.OpenComponent(index, typeof(TTT.Framework.Component.AutoFormComponents.InputNumber<int?>));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<int?>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<int?>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (int?)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<int?>>(exp));
                break;
            case Type _ when prp.PropertyType == typeof(double):
                builder.OpenComponent(index, typeof(TTT.Framework.Component.AutoFormComponents.InputNumber<double>));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<double>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<double>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (double)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<double>>(exp));
                break;
            case Type _ when prp.PropertyType == typeof(double?):
                builder.OpenComponent(index, typeof(TTT.Framework.Component.AutoFormComponents.InputNumber<double?>));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<double?>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<double?>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (double?)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<double?>>(exp));
                break;
            default:
                break;
        }
    }

    private void OpenComponentInputDate(ref Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder,
        System.Reflection.PropertyInfo prp,
        System.Linq.Expressions.MemberExpression exp,
        System.Reflection.PropertyInfo? propInfoValue,
        int index = 0,
        int indexValueChange = 3,
        int indexValueExp = 4)
    {
        switch (prp.PropertyType)
        {
            case Type _ when prp.PropertyType == typeof(DateTime):
                builder.OpenComponent(index, typeof(TTT.Framework.Component.AutoFormComponents.InputDate));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<DateTime>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<DateTime>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (DateTime)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<DateTime>>(exp));
                break;
            case Type _ when prp.PropertyType == typeof(DateTime?):
                builder.OpenComponent(index, typeof(TTT.Framework.Component.AutoFormComponents.InputDateNull));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<DateTime?>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<DateTime?>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (DateTime?)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<DateTime?>>(exp));
                break;
            default:
                break;
        }
    }

    private void OpenComponentInputDateTime(ref Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder,
        System.Reflection.PropertyInfo prp,
        System.Linq.Expressions.MemberExpression exp,
        System.Reflection.PropertyInfo? propInfoValue,
        int index = 0,
        int indexValueChange = 3,
        int indexValueExp = 4)
    {
        switch (prp.PropertyType)
        {
            case Type _ when prp.PropertyType == typeof(DateTime):
                builder.OpenComponent(index, typeof(TTT.Framework.Component.AutoFormComponents.InputDateTime));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<DateTime>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<DateTime>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (DateTime)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<DateTime>>(exp));
                break;
            case Type _ when prp.PropertyType == typeof(DateTime?):
                builder.OpenComponent(index, typeof(TTT.Framework.Component.AutoFormComponents.InputDateTimeNull));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<DateTime?>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<DateTime?>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (DateTime?)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<DateTime?>>(exp));
                break;
            default:
                break;
        }
    }

    private void OpenComponentInputTime(ref Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder,
        System.Reflection.PropertyInfo prp,
        System.Linq.Expressions.MemberExpression exp,
        System.Reflection.PropertyInfo? propInfoValue,
        int index = 0,
        int indexValueChange = 3,
        int indexValueExp = 4)
    {
        switch (prp.PropertyType)
        {
            case Type _ when prp.PropertyType == typeof(DateTime):
                builder.OpenComponent(index, typeof(TTT.Framework.Component.AutoFormComponents.InputTime));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<DateTime>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<DateTime>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (DateTime)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<DateTime>>(exp));
                break;
            case Type _ when prp.PropertyType == typeof(DateTime?):
                builder.OpenComponent(index, typeof(TTT.Framework.Component.AutoFormComponents.InputTimeNull));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<DateTime?>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<DateTime?>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (DateTime?)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<DateTime?>>(exp));
                break;
            default:
                break;
        }
    }

    private void OpenComponentCheckBox(ref Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder,
        System.Reflection.PropertyInfo prp,
        System.Linq.Expressions.MemberExpression exp,
        System.Reflection.PropertyInfo? propInfoValue,
        int index = 0,
        int indexValueChange = 3,
        int indexValueExp = 4)
    {
        switch (prp.PropertyType)
        {
            case Type _ when prp.PropertyType == typeof(bool):
                builder.OpenComponent(0, typeof(TTT.Framework.Component.AutoFormComponents.CheckBox));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<bool>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<bool>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (bool)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<bool>>(exp));
                break;
            case Type _ when prp.PropertyType == typeof(bool?):
                builder.OpenComponent(index, typeof(TTT.Framework.Component.AutoFormComponents.InputText<bool?>));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<bool?>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<bool?>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (bool?)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<bool?>>(exp));
                break;
            default:
                break;
        }
    }

    private void OpenComponentCombobox(ref Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder,
        System.Reflection.PropertyInfo prp,
        System.Linq.Expressions.MemberExpression exp,
        System.Reflection.PropertyInfo? propInfoValue,
        Dictionary<string,object?> dic,
        int index = 0,
        int indexData = 1,
        int indexValueChange = 3,
        int indexValueExp = 4)
    {
        switch (prp.PropertyType)
        {
            case Type _ when prp.PropertyType == typeof(int):
                builder.OpenComponent(0, typeof(TTT.Framework.Component.AutoFormComponents.Selection));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<int>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<int>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (int)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<int>>(exp));
                if (dic.ContainsKey(prp.Name) && dic[prp.Name] != null)
                {
                    builder.AddAttribute(indexData, "Data", ParseToLsDataLU(dic[prp.Name]));
                }
                else
                    builder.AddAttribute(indexData, "Data", new List<DataLookUp>());
                break;
            default:
                break;
        }
    }

    private void OpenComponentDropdowlist(ref Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder,
        System.Reflection.PropertyInfo prp,
        System.Linq.Expressions.MemberExpression exp,
        System.Reflection.PropertyInfo? propInfoValue,
        Dictionary<string, object?> dic,
        int index = 0,
        int indexData = 1,
        int indexValueChange = 3,
        int indexValueExp = 4)
    {
        switch (prp.PropertyType)
        {
            case Type _ when prp.PropertyType == typeof(string):
                builder.OpenComponent(0, typeof(TTT.Framework.Component.AutoFormComponents.Dropdowlist));
                builder.AddAttribute(indexValueChange, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<string>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<string>(this, Microsoft.AspNetCore.Components.EventCallback.Factory.CreateInferred(this, __value => propInfoValue.SetValue(Target, __value), (string)propInfoValue.GetValue(Target)))));
                builder.AddAttribute(indexValueExp, "ValueExpression", System.Linq.Expressions.Expression.Lambda<Func<string>>(exp));
                if (dic.ContainsKey(prp.Name) && dic[prp.Name] != null)
                    builder.AddAttribute(indexData, "Data", ParseToLsStringLU(dic[prp.Name]));
                else
                    builder.AddAttribute(indexData, "Data", new List<string>());
                break;
            default:
                break;
        }
    }
}
               